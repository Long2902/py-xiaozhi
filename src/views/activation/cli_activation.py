# -*- coding: utf-8 -*-
"""
Quy tr√¨nh k√≠ch ho·∫°t thi·∫øt b·ªã ·ªü ch·∫ø ƒë·ªô CLI cung c·∫•p c√πng ch·ª©c nƒÉng v·ªõi c·ª≠a s·ªï GUI nh∆∞ng hi·ªÉn th·ªã ho√†n to√†n tr√™n d√≤ng l·ªánh.
"""

from datetime import datetime
from typing import Optional

from src.core.system_initializer import SystemInitializer
from src.utils.device_activator import DeviceActivator
from src.utils.logging_config import get_logger

logger = get_logger(__name__)


class CLIActivation:
    """
    Tr√¨nh x·ª≠ l√Ω k√≠ch ho·∫°t thi·∫øt b·ªã ·ªü ch·∫ø ƒë·ªô CLI.
    """

    def __init__(self, system_initializer: Optional[SystemInitializer] = None):
        # Tham chi·∫øu th√†nh ph·∫ßn
        self.system_initializer = system_initializer
        self.device_activator: Optional[DeviceActivator] = None

        # Qu·∫£n l√Ω tr·∫°ng th√°i
        self.current_stage = None
        self.activation_data = None
        self.is_activated = False

        self.logger = logger

    async def run_activation_process(self) -> bool:
        """Ch·∫°y to√†n b·ªô quy tr√¨nh k√≠ch ho·∫°t CLI.

        Returns:
            bool: K√≠ch ho·∫°t c√≥ th√†nh c√¥ng hay kh√¥ng
        """
        try:
            self._print_header()

            # N·∫øu ƒë√£ c√≥ s·∫µn SystemInitializer th√¨ s·ª≠ d·ª•ng tr·ª±c ti·∫øp
            if self.system_initializer:
                self._log_and_print("S·ª≠ d·ª•ng h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
                self._update_device_info()
                return await self._start_activation_process()
            else:
                # Ng∆∞·ª£c l·∫°i t·∫°o phi√™n b·∫£n m·ªõi v√† ch·∫°y kh·ªüi t·∫°o
                self._log_and_print("B·∫Øt ƒë·∫ßu quy tr√¨nh kh·ªüi t·∫°o h·ªá th·ªëng")
                self.system_initializer = SystemInitializer()

                # Th·ª±c thi quy tr√¨nh kh·ªüi t·∫°o
                init_result = await self.system_initializer.run_initialization()

                if init_result.get("success", False):
                    self._update_device_info()

                    # Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
                    status_message = init_result.get("status_message", "")
                    if status_message:
                        self._log_and_print(status_message)

                    # Ki·ªÉm tra c√≥ c·∫ßn k√≠ch ho·∫°t hay kh√¥ng
                    if init_result.get("need_activation_ui", True):
                        return await self._start_activation_process()
                    else:
                        # Kh√¥ng c·∫ßn k√≠ch ho·∫°t, k·∫øt th√∫c ngay
                        self.is_activated = True
                        self._log_and_print("Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t, kh√¥ng c·∫ßn thao t√°c th√™m")
                        return True
                else:
                    error_msg = init_result.get("error", "Kh·ªüi t·∫°o th·∫•t b·∫°i")
                    self._log_and_print(f"L·ªói: {error_msg}")
                    return False

        except KeyboardInterrupt:
            self._log_and_print("\nNg∆∞·ªùi d√πng ƒë√£ h·ªßy quy tr√¨nh k√≠ch ho·∫°t")
            return False
        except Exception as e:
            self.logger.error(f"Quy tr√¨nh k√≠ch ho·∫°t CLI g·∫∑p l·ªói: {e}", exc_info=True)
            self._log_and_print(f"L·ªói k√≠ch ho·∫°t: {e}")
            return False

    def _print_header(self):
        """
        In th√¥ng tin ph·∫ßn ƒë·∫ßu c·ªßa quy tr√¨nh k√≠ch ho·∫°t CLI.
        """
        print("\n" + "=" * 60)
        print("Kh√°ch h√†ng XiaoZhi AI - Quy tr√¨nh k√≠ch ho·∫°t thi·∫øt b·ªã")
        print("=" * 60)
        print("ƒêang kh·ªüi t·∫°o thi·∫øt b·ªã, vui l√≤ng ch·ªù...")
        print()

    def _update_device_info(self):
        """
        C·∫≠p nh·∫≠t hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã.
        """
        if (
            not self.system_initializer
            or not self.system_initializer.device_fingerprint
        ):
            return

        device_fp = self.system_initializer.device_fingerprint

        # L·∫•y th√¥ng tin thi·∫øt b·ªã
        serial_number = device_fp.get_serial_number()
        mac_address = device_fp.get_mac_address_from_efuse()

        # L·∫•y tr·∫°ng th√°i k√≠ch ho·∫°t
        activation_status = self.system_initializer.get_activation_status()
        local_activated = activation_status.get("local_activated", False)
        server_activated = activation_status.get("server_activated", False)
        status_consistent = activation_status.get("status_consistent", True)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i k√≠ch ho·∫°t
        self.is_activated = local_activated

        # Hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã
        print("üì± Th√¥ng tin thi·∫øt b·ªã:")
        print(f"   S·ªë s√™-ri: {serial_number if serial_number else '--'}")
        print(f"   ƒê·ªãa ch·ªâ MAC: {mac_address if mac_address else '--'}")

        # Hi·ªÉn th·ªã tr·∫°ng th√°i k√≠ch ho·∫°t
        if not status_consistent:
            if local_activated and not server_activated:
                status_text = "Tr·∫°ng th√°i kh√¥ng kh·ªõp (c·∫ßn k√≠ch ho·∫°t l·∫°i)"
            else:
                status_text = "Tr·∫°ng th√°i kh√¥ng kh·ªõp (ƒë√£ t·ª± s·ª≠a)"
        else:
            status_text = "ƒê√£ k√≠ch ho·∫°t" if local_activated else "Ch∆∞a k√≠ch ho·∫°t"

        print(f"   Tr·∫°ng th√°i k√≠ch ho·∫°t: {status_text}")

    async def _start_activation_process(self) -> bool:
        """
        B·∫Øt ƒë·∫ßu quy tr√¨nh k√≠ch ho·∫°t.
        """
        try:
            # L·∫•y d·ªØ li·ªáu k√≠ch ho·∫°t
            activation_data = self.system_initializer.get_activation_data()

            if not activation_data:
                self._log_and_print("\nKh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu k√≠ch ho·∫°t")
                print("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu k√≠ch ho·∫°t, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng")
                return False

            self.activation_data = activation_data

            # Hi·ªÉn th·ªã th√¥ng tin k√≠ch ho·∫°t
            self._show_activation_info(activation_data)

            # Kh·ªüi t·∫°o b·ªô k√≠ch ho·∫°t thi·∫øt b·ªã
            config_manager = self.system_initializer.get_config_manager()
            self.device_activator = DeviceActivator(config_manager)

            # B·∫Øt ƒë·∫ßu quy tr√¨nh k√≠ch ho·∫°t
            self._log_and_print("\nB·∫Øt ƒë·∫ßu quy tr√¨nh k√≠ch ho·∫°t thi·∫øt b·ªã...")
            print("ƒêang k·∫øt n·ªëi t·ªõi m√°y ch·ªß k√≠ch ho·∫°t, vui l√≤ng gi·ªØ k·∫øt n·ªëi m·∫°ng...")

            activation_success = await self.device_activator.process_activation(
                activation_data
            )

            if activation_success:
                self._log_and_print("\nK√≠ch ho·∫°t thi·∫øt b·ªã th√†nh c√¥ng!")
                self._print_activation_success()
                return True
            else:
                self._log_and_print("\nK√≠ch ho·∫°t thi·∫øt b·ªã th·∫•t b·∫°i")
                self._print_activation_failure()
                return False

        except Exception as e:
            self.logger.error(f"Quy tr√¨nh k√≠ch ho·∫°t g·∫∑p l·ªói: {e}", exc_info=True)
            self._log_and_print(f"\nL·ªói k√≠ch ho·∫°t: {e}")
            return False

    def _show_activation_info(self, activation_data: dict):
        """
        Hi·ªÉn th·ªã th√¥ng tin k√≠ch ho·∫°t.
        """
        code = activation_data.get("code", "------")
        message = activation_data.get("message", "H√£y truy c·∫≠p xiaozhi.me ƒë·ªÉ nh·∫≠p m√£ x√°c minh")

        print("\n" + "=" * 60)
        print("Th√¥ng tin k√≠ch ho·∫°t thi·∫øt b·ªã")
        print("=" * 60)
        print(f"M√£ k√≠ch ho·∫°t: {code}")
        print(f"H∆∞·ªõng d·∫´n k√≠ch ho·∫°t: {message}")
        print("=" * 60)

        # ƒê·ªãnh d·∫°ng m√£ x√°c minh (th√™m d·∫•u c√°ch gi·ªØa c√°c k√Ω t·ª±)
        formatted_code = " ".join(code)
        print(f"\nM√£ x√°c minh (h√£y nh·∫≠p tr√™n trang web): {formatted_code}")
        print("\nH√£y l√†m theo c√°c b∆∞·ªõc sau ƒë·ªÉ ho√†n t·∫•t k√≠ch ho·∫°t:")
        print("1. M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p xiaozhi.me")
        print("2. ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n")
        print("3. Ch·ªçn th√™m thi·∫øt b·ªã")
        print(f"4. Nh·∫≠p m√£ x√°c minh: {formatted_code}")
        print("5. X√°c nh·∫≠n th√™m thi·∫øt b·ªã")
        print("\nƒêang ch·ªù x√°c nh·∫≠n k√≠ch ho·∫°t, vui l√≤ng ho√†n t·∫•t tr√™n trang web...")

        self._log_and_print(f"M√£ k√≠ch ho·∫°t: {code}")
        self._log_and_print(f"H∆∞·ªõng d·∫´n k√≠ch ho·∫°t: {message}")

    def _print_activation_success(self):
        """
        In th√¥ng b√°o k√≠ch ho·∫°t th√†nh c√¥ng.
        """
        print("\n" + "=" * 60)
        print("K√≠ch ho·∫°t thi·∫øt b·ªã th√†nh c√¥ng!")
        print("=" * 60)
        print("Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√†i kho·∫£n c·ªßa b·∫°n")
        print("C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông")
        print("Chu·∫©n b·ªã kh·ªüi ƒë·ªông ·ª©ng d·ª•ng XiaoZhi AI...")
        print("=" * 60)

    def _print_activation_failure(self):
        """
        In th√¥ng b√°o k√≠ch ho·∫°t th·∫•t b·∫°i.
        """
        print("\n" + "=" * 60)
        print("K√≠ch ho·∫°t thi·∫øt b·ªã th·∫•t b·∫°i")
        print("=" * 60)
        print("Nguy√™n nh√¢n c√≥ th·ªÉ:")
        print("‚Ä¢ K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh")
        print("‚Ä¢ M√£ x√°c minh nh·∫≠p sai ho·∫∑c ƒë√£ h·∫øt h·∫°n")
        print("‚Ä¢ M√°y ch·ªß t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng")
        print("\nGi·∫£i ph√°p ƒë·ªÅ xu·∫•t:")
        print("‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng")
        print("‚Ä¢ Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh ƒë·ªÉ l·∫•y m√£ m·ªõi")
        print("‚Ä¢ ƒê·∫£m b·∫£o nh·∫≠p ch√≠nh x√°c m√£ tr√™n trang web")
        print("=" * 60)

    def _log_and_print(self, message: str):
        """
        Ghi log ƒë·ªìng th·ªùi in ra terminal.
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        self.logger.info(message)

    def get_activation_result(self) -> dict:
        """
        L·∫•y k·∫øt qu·∫£ k√≠ch ho·∫°t.
        """
        device_fingerprint = None
        config_manager = None

        if self.system_initializer:
            device_fingerprint = self.system_initializer.device_fingerprint
            config_manager = self.system_initializer.config_manager

        return {
            "is_activated": self.is_activated,
            "device_fingerprint": device_fingerprint,
            "config_manager": config_manager,
        }
